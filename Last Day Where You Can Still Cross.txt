class Solution {
public:
    bool canwalk(int &row,int &col,vector<vector<int>>& cells, int &day){

        vector<vector<int>> grid(row,vector<int> (col,0));
        for(int i=0;i<day;i++){
            grid[cells[i][0]-1][cells[i][1]-1]=1;
        }

        queue<pair<int,int>> q;

        for(int i=0;i<col;i++){
            if(grid[0][i]==0){
                q.push({0,i});
                grid[0][i]=1;
            }
        }
        int dx[4]={-1,0,0,1};
        int dy[4]={0,-1,1,0};
        while(!q.empty()){
            pair<int,int> p=q.front(); q.pop();
            int r=p.first;
            int l=p.second;

            if(r==row-1) return true;

            for(int i=0;i<4;i++){
                int x=dx[i]+r;
                int y=dy[i]+l;

                if(x<0 || x>=row || y<0 || y>=col || grid[x][y]==1) continue;
                q.push({x,y});
                grid[x][y]=1;

            }
        }
        return false;

    }
   
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        
        int left=1,right=cells.size(),ans=0;

        while(left<=right){
             int mid=left+(right-left)/2;

             if(canwalk(row,col,cells,mid)){
                 ans=mid;
                 left=mid+1;
             }
             else{
                 right=mid-1;
             }
        }

        return ans;
    }
};