unordered_map<int,int> m1,m2;
   long long helper(int pos,int index,vector<int> & temp, vector<vector<long long>> &dp,int indicate){
       
       if(index==temp.size()) return 0;
       
       if(dp[index][indicate]!=-1)  return  dp[index][indicate];
       long long one=0,two=0;
       
       int left=m1[temp[index]];
       int right=m2[temp[index]];
       
       one = abs(pos-left)+abs(left-right)+helper(right,index+1,temp,dp,1);
        if(index==temp.size()-1)one+=abs(right-0);
       two=abs(pos-right)+abs(left-right)+helper(left,index+1,temp,dp,0);
       if(index==temp.size()-1)two+=abs(left-0);
       return dp[index][indicate]= min(one,two);
       
   }
    long long minTime(int n, vector<int> &locations, vector<int> &types) {
        // code here
        int mx=*max_element(types.begin(),types.end());
        
        vector<int> ele(mx+1,0);
        
        for(int i=0;i<n;i++){
            ele[types[i]]=1;
            
            if(m1.find(types[i])==m1.end()){
               m1[types[i]]=locations[i]; 
               m2[types[i]]=locations[i]; 
            }
            else{
                m1[types[i]]=min(m1[types[i]],locations[i]);
                m2[types[i]]=max(m2[types[i]],locations[i]);
            }
        }
        
        vector<int> temp;
        
        for(int i=0;i<=mx;i++){
            if(ele[i]==1) temp.push_back(i);
        }
        
        vector<vector<long long>> dp(temp.size(),vector<long long> (2,-1));
        return helper(0,0,temp,dp,0);
    }